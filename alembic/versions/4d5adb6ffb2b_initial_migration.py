"""Initial migration

Revision ID: 4d5adb6ffb2b
Revises: 
Create Date: 2025-10-15 09:34:53.637973

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4d5adb6ffb2b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('role', sa.Enum('store', 'purchaser', 'admin', name='userrole'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id_str', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('expected_delivery_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('PENDING_APPROVAL', 'REJECTED', 'PENDING_PURCHASE', 'PURCHASED', 'DELIVERED', name='orderstatus'), nullable=True),
    sa.Column('store_id', sa.Integer(), nullable=True),
    sa.Column('purchaser_id', sa.Integer(), nullable=True),
    sa.Column('buy_rate', sa.Float(), nullable=True),
    sa.Column('proof_photo_url', sa.String(), nullable=True),
    sa.Column('adjusted_quantity', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['purchaser_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_category'), 'orders', ['category'], unique=False)
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_order_id_str'), 'orders', ['order_id_str'], unique=True)
    # ### end Alembic commands ###


# def downgrade() -> None:
#     """Downgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.drop_index(op.f('ix_orders_order_id_str'), table_name='orders')
#     op.drop_index(op.f('ix_orders_id'), table_name='orders')
#     op.drop_index(op.f('ix_orders_category'), table_name='orders')
#     op.drop_table('orders')
#     op.drop_index(op.f('ix_users_username'), table_name='users')
#     op.drop_index(op.f('ix_users_id'), table_name='users')
#     op.drop_table('users')
#     # ### end Alembic commands ###

def downgrade() -> None:
    # Drop indexes and tables first
    op.drop_index(op.f('ix_orders_order_id_str'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_category'), table_name='orders')
    op.drop_table('orders')

    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')

    # Now drop the Postgres enum types left behind
    op.execute("DROP TYPE IF EXISTS orderstatus CASCADE;")
    op.execute("DROP TYPE IF EXISTS userrole CASCADE;")
